var documenterSearchIndex = {"docs":
[{"location":"lib/public_methods/","page":"Public Methods","title":"Public Methods","text":"CurrentModule = PhyloDiamond","category":"page"},{"location":"lib/public_methods/","page":"Public Methods","title":"Public Methods","text":"phylo_diamond(cf::DataFrame, m::Int64, output_filename::String=\"phylo_diamond.txt\")","category":"page"},{"location":"lib/public_methods/#PhyloDiamond.phylo_diamond","page":"Public Methods","title":"PhyloDiamond.phylo_diamond","text":"Function to infer a 4-node hybridization cycle using the phylogenetic invariants method\n(Wu and Solis-Lemus, 2022)\nInput:\n    cf: DataFrame object with the concordance factor table (first 4 columns should be taxon names, last 3 columns should be cf values)\n    m: the number of optimal phylogenetic networks returned\n    output_filename: a file name for the output file (or \"phylo_diamond.txt\" by default)\noutput:\n    top m optimal phylogenetic networks in a Dict object\n\n\n\n\n\n","category":"function"},{"location":"lib/public_methods/","page":"Public Methods","title":"Public Methods","text":"phylo_diamond(gene_trees_filename::String, m::Int64, output_filename::String=\"phylo_diamond.txt\")","category":"page"},{"location":"lib/public_methods/#PhyloDiamond.phylo_diamond-2","page":"Public Methods","title":"PhyloDiamond.phylo_diamond","text":"Function to infer a 4-node hybridization cycle using the phylogenetic invariants method\n(Wu and Solis-Lemus, 2022)\nInput:\n    gene_trees_filename: textfile with gene trees (one per row) in parenthetical format\n    m: the number of optimal phylogenetic networks returned\n    output_filename: a file name for the output file (or \"phylo_diamond.txt\" by default)\noutput:\n    top m optimal phylogenetic networks in a Dict object\n\n\n\n\n\n","category":"function"},{"location":"man/implementation/#Implementing-PhyloDiamond-Algorithm","page":"Implementation","title":"Implementing PhyloDiamond Algorithm","text":"","category":"section"},{"location":"man/implementation/#Main-Functions","page":"Implementation","title":"Main Functions","text":"","category":"section"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"To infer a 4-node hybridization cycle, users can either input a concordance factor table or directly input a file of gene trees.","category":"page"},{"location":"man/implementation/#Function-with-a-table-of-concordance-factors-as-input","page":"Implementation","title":"Function with a table of concordance factors as input","text":"","category":"section"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"The main function in the PhyloDiamond.jl package is:","category":"page"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"phylo_diamond(cf::DataFrame, m::Int64, output_filename::String=\"phylo_diamond.txt\")","category":"page"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"which has three main arguments:","category":"page"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"cf: a DataFrame object containing concordance factor (CF) values for every 4-taxon subset in the data. Taxon names should appear in the first 4 columns and CF values in the last 3 columns\nEach row correspond to a taxon set s={a,b,c,d}\nThere are only three possible quartet splits q1=ab|cd, q2=ac|bd, q3=ad|bc\nThe dataframe should contain 7 columns, ordered as a, b, c, d, q1, q2, q3\nm: the number of optimal phylogenetic networks returned (we recommend m=5 based on our simulations)\noutput_filename: a file name for the output file (or \"phylo_diamond.txt\" by default)","category":"page"},{"location":"man/implementation/#Function-with-gene-trees-as-input","page":"Implementation","title":"Function with gene trees as input","text":"","category":"section"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"Because of Julia's multiple dispatch, we have the same name of the function with a different type of input file:","category":"page"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"phylo_diamond(gene_trees_filename::String, m::Int64, output_filename::String=\"phylo_diamond.txt\")","category":"page"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"gene_trees_filename: the name of the textfile with all gene trees in parenthetical format (one gene tree per line)\nm: the number of optimal phylogenetic networks returned (we recommend m=5 based on our simulations)\noutput_filename: a file name for the output file (or \"phylo_diamond.txt\" by default)","category":"page"},{"location":"man/implementation/#Examples","page":"Implementation","title":"Examples","text":"","category":"section"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"First, we load the package:","category":"page"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"using PhyloDiamond","category":"page"},{"location":"man/implementation/#Example-1:-A-concordance-factor-table-as-input","page":"Implementation","title":"Example 1: A concordance factor table as input","text":"","category":"section"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"If your concordance factor table is in csv file format, you need to read the file in Julia first. If you have not used the CSV.jl package before then you may need to install it first:","category":"page"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"using Pkg\nPkg.add(\"CSV\")","category":"page"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"The CSV.jl functions are not loaded automatically and must be imported into the session:","category":"page"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"using CSV","category":"page"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"The concordance factor table can now be read from a CSV file at path input using","category":"page"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"df = DataFrame(CSV.File(input))","category":"page"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"For example:","category":"page"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"70×7 DataFrame\n Row │ tx1     tx2     tx3     tx4     expCF12    expCF13      expCF14     \n     │ String  String  String  String  Float64    Float64      Float64     \n─────┼─────────────────────────────────────────────────────────────────────\n   1 │ 7       8       3       4       0.999392   0.000303961  0.000303961\n   2 │ 7       8       3       1       0.993192   0.00340375   0.00340375\n   3 │ 7       8       3       2       0.993192   0.00340375   0.00340375\n   4 │ 7       8       3       5       0.98779    0.00610521   0.00610521\n   5 │ 7       8       3       6       0.98779    0.00610521   0.00610521\n   6 │ 7       8       4       1       0.993192   0.00340375   0.00340375\n   7 │ 7       8       4       2       0.993192   0.00340375   0.00340375\n   8 │ 7       8       4       5       0.98779    0.00610521   0.00610521\n  ⋮  │   ⋮       ⋮       ⋮       ⋮         ⋮           ⋮            ⋮\n  63 │ 3       1       2       6       0.0999344  0.0999344    0.800131\n  64 │ 3       1       5       6       0.964386   0.0178072    0.0178072\n  65 │ 3       2       5       6       0.964386   0.0178072    0.0178072\n  66 │ 4       1       2       5       0.0999344  0.0999344    0.800131\n  67 │ 4       1       2       6       0.0999344  0.0999344    0.800131\n  68 │ 4       1       5       6       0.964386   0.0178072    0.0178072\n  69 │ 4       2       5       6       0.964386   0.0178072    0.0178072\n  70 │ 1       2       5       6       0.984151   0.00792452   0.00792452","category":"page"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"Then we can run the PhyloDiamond algorithm on this concordance factor table. ","category":"page"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"phylo_diamond(df, 5)","category":"page"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"This function outputs a dictionary, where is key is the rank and the value is the inferred network. The networks are represented in newick format:","category":"page"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"Dict{Int64, Any} with 5 entries:\n  5 => \"((7:1,8:1):4, (((1:1,2:1):2, ((3:1,4:1):1)#H1:1::0.7):1, (#H1:1::0.3,(5:1,6:1):2):1):1);\"\n  4 => \"((5:1,6:1):4, (((7:1,8:1):2, ((1:1,2:1):1)#H1:1::0.7):1, (#H1:1::0.3,(3:1,4:1):2):1):1);\"\n  2 => \"((7:1,8:1):4, (((5:1,6:1):2, ((1:1,2:1):1)#H1:1::0.7):1, (#H1:1::0.3,(3:1,4:1):2):1):1);\"\n  3 => \"((5:1,6:1):4, (((3:1,4:1):2, ((1:1,2:1):1)#H1:1::0.7):1, (#H1:1::0.3,(7:1,8:1):2):1):1);\"\n  1 => \"((7:1,8:1):4, (((3:1,4:1):2, ((1:1,2:1):1)#H1:1::0.7):1, (#H1:1::0.3,(5:1,6:1):2):1):1);\"","category":"page"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"Below is what is stored in the output file (\"phylo_diamond.txt\" because we did not specify any name):","category":"page"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"Inference of top 5 8-taxon phylogenetic networks with phylogenetic invariants\n1. N2222 (2.2216927709301364e-16)\n[(1,2),(3,4),(5,6),(7,8)]\n\"((7:1,8:1):4, (((3:1,4:1):2, ((1:1,2:1):1)#H1:1::0.7):1, (#H1:1::0.3,(5:1,6:1):2):1):1);\"\n2. N2222 (2.2230610911746716e-16)\n[(1,2),(5,6),(3,4),(7,8)]\n\"((7:1,8:1):4, (((5:1,6:1):2, ((1:1,2:1):1)#H1:1::0.7):1, (#H1:1::0.3,(3:1,4:1):2):1):1);\"\n3. N2222 (0.006576057988736475)\n[(1,2),(3,4),(7,8),(5,6)]\n\"((5:1,6:1):4, (((3:1,4:1):2, ((1:1,2:1):1)#H1:1::0.7):1, (#H1:1::0.3,(7:1,8:1):2):1):1);\"\n4. N2222 (0.00657929000066336)\n[(1,2),(7,8),(3,4),(5,6)]\n\"((5:1,6:1):4, (((7:1,8:1):2, ((1:1,2:1):1)#H1:1::0.7):1, (#H1:1::0.3,(3:1,4:1):2):1):1);\"\n5. N2222 (0.0066877783427965855)\n[(3,4),(1,2),(5,6),(7,8)]\n\"((7:1,8:1):4, (((1:1,2:1):2, ((3:1,4:1):1)#H1:1::0.7):1, (#H1:1::0.3,(5:1,6:1):2):1):1);\"","category":"page"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"To understand the output file, take the first network as an example. N2222 is the structure of the network, meaning that there are 2 taxon in clades n0, n1, n2, n3 (see Wu and Solis-Lemus, 2022 for more on the notation). ","category":"page"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"The value after N2222 is the corresponding invariant score for this network, and a small score represents a highly possible network. [(1,2),(3,4),(5,6),(7,8)] is another representation of the same network where we specify which are the taxa in each clade. For example, (1,2) are the taxa in clade n0.","category":"page"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"At the end, we have the newick format of the inferred network in quotes:","category":"page"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"\"((7:1,8:1):4, (((3:1,4:1):2, ((1:1,2:1):1)#H1:1::0.7):1, (#H1:1::0.3,(5:1,6:1):2):1):1);\"","category":"page"},{"location":"man/implementation/#Example-2:-Gene-trees-as-input","page":"Implementation","title":"Example 2: Gene trees as input","text":"","category":"section"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"Here is an example of a textfile with gene tree (\"gt.txt\"):","category":"page"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"((7:0.722,8:0.722):2.844,(((3:0.878,4:0.878):0.907,(1:0.935,2:0.935):0.849):1.005,(5:1.853,6:1.853):0.937):0.776);\n((7:0.649,8:0.649):2.104,((5:1.919,6:1.919):0.374,((3:0.634,4:0.634):1.442,(1:0.660,2:0.660):1.416):0.218):0.460);\n((7:0.942,8:0.942):3.188,(6:3.361,(5:2.130,((1:0.816,2:0.816):1.294,(3:1.045,4:1.045):1.065):0.021):1.231):0.769);\n  ⋮               ⋮               ⋮               ⋮               ⋮               ⋮               ⋮               ⋮\n(((3:0.600,4:0.600):1.746,(1:0.841,2:0.841):1.506):0.654,((7:0.613,8:0.613):2.148,(5:0.762,6:0.762):1.999):0.239);\n((7:0.702,8:0.702):2.679,((5:1.454,6:1.454):0.672,(3:1.942,(4:1.707,(1:0.674,2:0.674):1.033):0.234):0.184):1.255);\n(((3:0.647,4:0.647):1.243,(1:1.407,2:1.407):0.483):0.844,((7:0.581,8:0.581):1.979,(5:1.204,6:1.204):1.357):0.173);","category":"page"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"We can call the phylo_diamond function directly on this file:","category":"page"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"phylo_diamond(\"gt.txt\", 5)","category":"page"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"The output file has the same structure as the one described in the previous section.","category":"page"},{"location":"man/implementation/#Error-reporting","page":"Implementation","title":"Error reporting","text":"","category":"section"},{"location":"man/implementation/","page":"Implementation","title":"Implementation","text":"Please report any bugs and errors by opening an issue.","category":"page"},{"location":"#PhyloDiamond.jl","page":"Home","title":"PhyloDiamond.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PhyloDiamond.jl is a Julia package to infer 4-node hybridization cycles in phylogenetic networks using algebraic invariants. The inference algorithm is described in the paper below.","category":"page"},{"location":"#Citation","page":"Home","title":"Citation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use PhyloDiamond.jl in your work, we kindly ask that you cite the following paper: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Wu, Z., Solís-Lemus, C. (2022). Ultrafast learning of 4-node hybridization cycles in phylogenetic networks using algebraic invariants. arXiv:2211.16647.","category":"page"},{"location":"man/installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"man/installation/#Installation-of-Julia","page":"Installation","title":"Installation of Julia","text":"","category":"section"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"Julia is a high-level and interactive programming language (like R or Matlab), but it is also high-performance (like C). To install Julia, follow instructions here. For a quick & basic tutorial on Julia, see learn x in y minutes.","category":"page"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"Text editors:","category":"page"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"Visual Studio Code provides an editor and an integrated development environment (IDE) for Julia: highly recommended!\nYou can also run Julia within a Jupyter notebook (formerly IPython notebook).","category":"page"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"IMPORTANT: Julia code is just-in-time compiled. This means that the first time you run a function, it will be compiled at that moment. So, please be patient! Future calls to the function will be much much faster. Trying out toy examples for the first calls is a good idea.","category":"page"},{"location":"man/installation/#Installation-of-the-PhyloDiamond.jl-package","page":"Installation","title":"Installation of the PhyloDiamond.jl package","text":"","category":"section"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"To install the package, type inside Julia:","category":"page"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"]\nadd PhyloDiamond","category":"page"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"Installation can take a few minutes, please be patient.","category":"page"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"The PhyloDiamond.jl package has dependencies like Distributions and DataFrames (see the Project.toml file for the full list), but everything is installed automatically.","category":"page"},{"location":"man/installation/#Loading-the-Package","page":"Installation","title":"Loading the Package","text":"","category":"section"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"To check that your installation worked, type this in Julia to load the package. This is something to type every time you start a Julia session:","category":"page"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"using PhyloDiamond","category":"page"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"This step can also take a while, if Julia needs to pre-compile the code (after a package update for instance).","category":"page"},{"location":"man/installation/","page":"Installation","title":"Installation","text":"Press ? inside Julia to switch to help mode,  followed by the name of a function (or type) to get more details about it.","category":"page"}]
}
